import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;

public class SlotMachine extends MouseAdapter {
    public static JLabel amount = new JLabel(String.valueOf(0));


    public static void main(String[] args) {
        JPanel panel = new JPanel(null);

        JFrame frame = new JFrame(String.valueOf(0));
        frame.setVisible(true);
        frame.setSize(500,500);
        frame.add(panel);

        JLabel one = new JLabel(String.valueOf(0));
        one.setSize(100, 100);
        one.setLocation(90, 50);
        one.setFont((new Font("Arial", Font.PLAIN, 30)));
        one.setVisible(true);
        panel.add(one);

        JLabel two = new JLabel(String.valueOf(0));
        two.setSize(100, 100);
        two.setLocation(160, 50);
        two.setFont((new Font("Arial", Font.PLAIN, 30)));
        two.setVisible(true);
        panel.add(two);

        JLabel three = new JLabel(String.valueOf(0));
        three.setSize(100, 100);
        three.setLocation(210, 50);
        three.setFont((new Font("Arial", Font.PLAIN, 30)));
        three.setVisible(true);
        panel.add(three);


        amount.setSize(64,64);
        amount.setVisible(true);
        amount.setLocation(400, 120);
        panel.add(amount);

        JTextField Bet = new JTextField(String.valueOf(1));
        Bet.setVisible(true);
        Bet.setSize(20,20);
        Bet.setLocation(50,200);
        panel.add(Bet);

        JLabel credits = new JLabel(String.valueOf(100));
        credits.setVisible(true);
        credits.setSize(90,64);
        credits.setLocation(300, 200);
        credits.setFont((new Font("Clarendon Bold", Font.BOLD, 50)));
        panel.add(credits);



        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        JButton Spin = new JButton("Spin");
        Spin.setSize(90,90);
        Spin.setLocation(400,50);
        Spin.setVisible(true);
        panel.add(Spin);
        Spin.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {

                //MUSIC

                if(Integer.parseInt(Bet.getText()) > Integer.parseInt(credits.getText())){
                    return;

                }
                if(e.getButton() == MouseEvent.BUTTON1){
                    one.setText((String.valueOf(Math.round(Math.random()*10))));
                    two.setText(String.valueOf(Math.round(Math.random()*10)));
                    three.setText(String.valueOf(Math.round(Math.random()*10)));
                    credits.setText(String.valueOf(Integer.parseInt(credits.getText()) - Integer.parseInt(Bet.getText())));
                    if (one.getText().equals(two.getText())&& !one.getText().equals(three.getText())) {
                        credits.setText(String.valueOf(Integer.parseInt(credits.getText()) + 2*(Integer.parseInt(Bet.getText()))));
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\bener\\Downloads\\mixkit-coins-handling-1939.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip( );
                            clip.open(audioInputStream);
                            clip.start( );
                        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
                            throw new RuntimeException(ex);
                        }

                    }else if(one.getText().equals(two.getText())&& one.getText().equals(three.getText())){
                        credits.setText(String.valueOf(Integer.parseInt(credits.getText()) + 10*(Integer.parseInt(Bet.getText()))));
                        try {
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\bener\\Downloads\\mixkit-magical-coin-win-1936.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip( );
                            clip.open(audioInputStream);
                            clip.start( );
                        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
                            throw new RuntimeException(ex);
                        }




                    }else{
                        try {
                            //MUSIC
                            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\bener\\Downloads\\vibrating-thud-39536.wav").getAbsoluteFile());
                            Clip clip = AudioSystem.getClip( );
                            clip.open(audioInputStream);
                            clip.start( );
                        } catch (UnsupportedAudioFileException | LineUnavailableException | IOException ex) {
                            throw new RuntimeException(ex);
                        }
                    }
                    if(Integer.parseInt(credits.getText()) < 0) {
                        credits.setText(String.valueOf(1));
                        JOptionPane.showMessageDialog(null, "Out Of Credits");
                    }

                    }
            }
            @Override
            public void mousePressed(MouseEvent e) {}
            @Override
            public void mouseReleased(MouseEvent e) {}
            @Override
            public void mouseEntered(MouseEvent e) {}
            @Override
            public void mouseExited(MouseEvent e) {}

        });









    }

}
